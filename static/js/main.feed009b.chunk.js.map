{"version":3,"sources":["Constant.ts","api.ts","utils.ts","App.tsx","index.tsx"],"names":["API","drawCard","deckID","fetch","then","res","json","convertStringToValue","cardValue","parseInt","App","useState","score","setScore","counter","setCounter","deckId","setDeckId","img","value","selectedCard","setSelectedCard","isGameFinish","arrangeData","useCallback","response","deck_id","catch","console","log","data","cards","image","err","useEffect","compareCard","isGreater","alert","nextCard","undefined","value1","value2","Value1","Value2","cardCompare","scoreValue","remaining","className","onClick","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAAaA,EAAM,sCCENC,EAAW,SAACC,GAAD,OACtBC,MAAM,GAAD,OAAIH,EAAJ,YAAWE,EAAX,mBAAmCE,MAAK,SAACC,GAAD,OAASA,EAAIC,WCH/CC,EAAuB,SAACC,GACnC,OAAQA,GACN,IAAK,MACH,OAAO,EACT,IAAK,OACH,OAAO,GACT,IAAK,QACH,OAAO,GACT,IAAK,OACH,OAAO,GACT,QACE,OAAOC,SAASD,K,OCgGPE,MArGf,WAEE,MAAyBC,mBAAS,GAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,mBHRP,IGQtB,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAyBJ,mBAAS,IAAlC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAuCN,mBAAgB,CACrDO,IAAI,GAAGC,MAAM,KADf,mBAAOC,EAAP,KAAoBC,EAApB,KAGMC,EAA2B,IAAZR,EAGfS,EAAcC,uBAAa,WFX1BrB,MAAM,GAAD,OAAIH,EAAJ,kBAAwBI,MAAK,SAACqB,GAAD,OAAYA,EAASnB,UEczDF,MAAK,SAACC,GAEL,OADAY,EAAUZ,EAAIqB,SACPrB,EAAIqB,WAEZC,OAAM,kBAAMC,QAAQC,IAAI,+BACxBzB,MAAK,SAACY,GAAD,OACJf,EAASe,GAAQZ,MAAK,SAAC0B,GAAD,OAAUT,EAAgB,CAC9CH,IAAKY,EAAKC,MAAM,GAAGC,MAAOb,MAAOW,EAAKC,MAAM,GAAGZ,cAGlDQ,OAAM,SAAAM,GAAG,OAAEL,QAAQC,IAAI,iBAAiBI,QAC3C,IAGFC,qBAAU,WACRX,MACA,CAACA,IAGH,IAAMY,EAAc,SAACC,GACnBnC,EAASe,GACNZ,MAAK,SAAC0B,GAEL,GAAGhB,GAAW,EAEZ,OADAuB,MAAM,eACC,EAET,IAAMC,EAAWR,EAAKC,MAAM,GACzBO,QAAyBC,IAAbD,IDlCK,SAACE,EAAgBC,GAC3C,IAAMC,EAASnC,EAAqBiC,GAC9BG,EAASpC,EAAqBkC,GACpC,OAAIC,EAASC,EACJ,EACED,IAAWC,EACb,GAEC,EC4BDC,CAAYN,EAASnB,MAAOC,EAAaD,SAAWiB,GACrDvB,GAAS,SAACgC,GAAD,OAAgBA,EAAa,KAGxCxB,EAAgB,CACdH,IAAKoB,EAASN,MACdb,MAAOmB,EAASnB,QAElBJ,EAAWe,EAAKgB,gBActB,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,yCAEF,0BAASA,UAAU,cAAnB,UACE,8BACE,iCACE,qBAAIA,UAAU,QAAd,oBAA8BnC,KAC9B,oBAAGmC,UAAU,OAAb,0BAAkCjC,UAGtC,sBAAKiC,UAAU,eAAf,WAEIzB,GACA,wBAAQ0B,QAAS,kBAAMb,GAAa,IAApC,qCAIDrB,EAAU,GAAK,qBAAKmC,IAAG,OAAE7B,QAAF,IAAEA,OAAF,EAAEA,EAAcF,IAAKgC,IAAI,mBAC/C5B,GACA,wBAAQ0B,QAAS,kBAAMb,EAAY,IAAnC,0CAKJ,8BACGb,GACC,wBAAQ0B,QAnCC,WAEjBjC,EHlEoB,IGmEpBF,EAAS,GACTU,KA+BQ,wCChGZ4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.feed009b.chunk.js","sourcesContent":["export const API = 'https://deckofcardsapi.com/api/deck';\r\nexport const TOTAL_CARD=52;","import {API} from './Constant';\r\n\r\nexport const drawCard = (deckID: string) =>\r\n  fetch(`${API}/${deckID}/draw/?count=1`).then((res) => res.json());\r\n\r\nexport const arrangeCards = () => {\r\n  return fetch(`${API}/new/shuffle/`).then((response)=>response.json());\r\n}","export const convertStringToValue = (cardValue: string): number => {\r\n  switch (cardValue) {\r\n    case \"ACE\":\r\n      return 1;\r\n    case \"JACK\":\r\n      return 11;\r\n    case \"QUEEN\":\r\n      return 12;\r\n    case \"KING\":\r\n      return 13;\r\n    default:\r\n      return parseInt(cardValue);\r\n  }\r\n};\r\nexport const  cardCompare = (value1: string, value2: string): number => {\r\n  const Value1 = convertStringToValue(value1);\r\n  const Value2 = convertStringToValue(value2);\r\n  if (Value1 > Value2) {\r\n    return 1;\r\n  } else if (Value1 === Value2) {\r\n    return 0;\r\n  } else {\r\n    return -1;\r\n  }\r\n};","import React,{useEffect,useState,useCallback} from 'react';\nimport {TOTAL_CARD} from './Constant';\nimport {TCard} from \"./types\";\nimport { arrangeCards, drawCard } from './api';\nimport {cardCompare} from './utils';;\n\nfunction App() {\n\n  const [score,setScore] = useState(0);\n  const [counter,setCounter] = useState(TOTAL_CARD); \n  const [deckId,setDeckId]=useState(\"\");\n  const [selectedCard,setSelectedCard] = useState<TCard>({\n    img:\"\",value:\"\"\n  })\n  const isGameFinish = counter === 0;\n\n\n  const arrangeData = useCallback (() => {\n    \n    arrangeCards()\n      .then((res) => {\n        setDeckId(res.deck_id);\n        return res.deck_id;\n      })\n      .catch(() => console.log('error on fetching deckId'))\n      .then((deckId) => \n        drawCard(deckId).then((data) => setSelectedCard({\n          img: data.cards[0].image, value: data.cards[0].value\n        }))\n      )\n      .catch(err=>console.log('error on fetch',err))\n  },[])\n  \n\n  useEffect(() => {\n    arrangeData();\n  },[arrangeData])\n\n  /* Function to Compare Cards */\n  const compareCard = (isGreater:number) => {\n    drawCard(deckId)\n      .then((data)=> {\n        // When it reset we check its have value\n        if(counter <= 0 ) {\n          alert(\"Start Again\")\n          return 0;\n        }\n        const nextCard = data.cards[0];\n        if(nextCard && nextCard !== undefined) {\n          // here we Compare value if its GreaterValue  or lower Value\n        if(cardCompare(nextCard.value, selectedCard.value) === isGreater) {\n          setScore((scoreValue) => scoreValue + 1)\n        }\n        // Set SelectedCard\n        setSelectedCard({\n          img: nextCard.image,\n          value: nextCard.value\n        });\n        setCounter(data.remaining)\n        }\n        \n      })\n\n  }\n\n  const resetCards = () => {\n    // Here we reset all values \n    setCounter(TOTAL_CARD);\n    setScore(0);\n    arrangeData();\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"d-flex p-2\">\n        <h1>Cards</h1>\n      </header>\n      <section className=\"App-content\">\n        <div>\n          <span>\n            <h2 className=\"score\">Score: {score}</h2>\n            <p className=\"card\"> Cards Left: {counter}</p>\n          </span>\n        </div>\n        <div className=\"play-section\">\n\n          {!isGameFinish && (\n            <button onClick={() => compareCard(-1)}>\n              Next card will be lower\n            </button>\n          )}\n         { counter > 0 && <img src={selectedCard?.img} alt=\"selected Card\"/> }\n          {!isGameFinish && (\n            <button onClick={() => compareCard(1)}>\n              Next card will be Greater\n            </button>\n          )}\n        </div>\n        <div>\n          {isGameFinish && (\n            <button onClick={resetCards}>Start a new Round</button>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}